# -*- coding: utf-8 -*-
"""Netflix dataset for 2019

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v6ln6weYT2OVucNdfd_aoGeZqnAxiJAt

**Introduction:**

Netflix collects a lot of data due to its large subscriber base.

The article focuses on a data science project that analyzes Netflix data using Python.

**Objectives of the Analysis:**

Understand available content.

Explore similarities between content.

Analyze the network between actors and directors.

Understand Netflix's focus.

Perform sentiment analysis on Netflix content.

**Data Used:**

The dataset includes TV shows and movies streamed on Netflix as of 2019, provided by Flixable.

**Python Libraries Used:**

numpy and pandas for data manipulation.

plotly.express for data visualization.

TextBlob for sentiment analysis.

**Data Exploration:**

Checked the dataset size (6234 rows, 12 columns).

Explored column names (e.g., show_id, type, title, director, cast, etc.).

**Content Distribution:**

Used a pie chart to show the distribution of content ratings on Netflix.

Found that the majority of content is categorized as "TV-MA" (for mature audiences).

**Top 5 Directors and Actors:**

Identified and visualized the top 5 directors and actors based on the amount of content.

**Trend Analysis:**

Explored the trend of content production over the years on Netflix using a line graph.

Noted a decline in production since 2018 for both movies and other shows.

**Sentiment Analysis:**

Analyzed the sentiment of Netflix content over the years using a bar graph.

Overall positive content was observed to be greater than neutral and negative combined.

**Conclusion:**

Concluded the analysis, inviting questions and comments.
"""

import numpy as np # linear algebra
import pandas as pd # for data preparation
import plotly.express as px # for data visualization
from textblob import TextBlob # for sentiment analysis

dff=pd.read_csv('/content/netflix_titles.csv')
dff.shape # it shows how many rows and colums the dataset contains

dff.columns

"""Distribution of contents"""

z = dff.groupby(['rating']).size().reset_index(name='counts')
pieChart = px.pie(z, values='counts', names='rating',
                  title='Distribution of Content Ratings on Netflix',
                  color_discrete_sequence=px.colors.qualitative.Set3)
pieChart.show()

"""Top 5 successfull directors"""

dff['director']=dff['director'].fillna('No Director Specified')
filtered_directors=pd.DataFrame()
filtered_directors=dff['director'].str.split(',',expand=True).stack()
filtered_directors=filtered_directors.to_frame()
filtered_directors.columns=['Director']
directors=filtered_directors.groupby(['Director']).size().reset_index(name='Total Content')
directors=directors[directors.Director !='No Director Specified']
directors=directors.sort_values(by=['Total Content'],ascending=False)
directorsTop5=directors.head()
directorsTop5=directorsTop5.sort_values(by=['Total Content'])
fig1=px.bar(directorsTop5,x='Total Content',y='Director',title='Top 5 Directors on Netflix')
fig1.show()

"""Top 5 successfull Actors"""

dff['cast']=dff['cast'].fillna('No Cast Specified')
filtered_cast=pd.DataFrame()
filtered_cast=dff['cast'].str.split(',',expand=True).stack()
filtered_cast=filtered_cast.to_frame()
filtered_cast.columns=['Actor']
actors=filtered_cast.groupby(['Actor']).size().reset_index(name='Total Content')
actors=actors[actors.Actor !='No Cast Specified']
actors=actors.sort_values(by=['Total Content'],ascending=False)
actorsTop5=actors.head()
actorsTop5=actorsTop5.sort_values(by=['Total Content'])
fig2=px.bar(actorsTop5,x='Total Content',y='Actor', title='Top 5 Actors on Netflix')
fig2.show()

"""Analysising the content of netflix"""

df1=dff[['type','release_year']]
df1=df1.rename(columns={"release_year": "Release Year"})
df2=df1.groupby(['Release Year','type']).size().reset_index(name='Total Content')
df2=df2[df2['Release Year']>=2010]
fig3 = px.line(df2, x="Release Year", y="Total Content", color='type',title='Trend of content produced over the years on Netflix')
fig3.show()

""" sentiment of content"""

dfx=dff[['release_year','description']]
dfx=dfx.rename(columns={'release_year':'Release Year'})
for index,row in dfx.iterrows():
    z=row['description']
    testimonial=TextBlob(z)
    p=testimonial.sentiment.polarity
    if p==0:
        sent='Neutral'
    elif p>0:
        sent='Positive'
    else:
        sent='Negative'
    dfx.loc[[index,2],'Sentiment']=sent


dfx=dfx.groupby(['Release Year','Sentiment']).size().reset_index(name='Total Content')

dfx=dfx[dfx['Release Year']>=2010]
fig4 = px.bar(dfx, x="Release Year", y="Total Content", color="Sentiment", title="Sentiment of content on Netflix")
fig4.show()

